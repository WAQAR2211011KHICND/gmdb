package com.galvanize.gmdb.gmdb.Controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.galvanize.gmdb.gmdb.Entity.GmdbUser;
import com.galvanize.gmdb.gmdb.Entity.Reviews;
import com.galvanize.gmdb.gmdb.Repository.MovieRepository;
import com.galvanize.gmdb.gmdb.Repository.ReviewsRepository;
import com.galvanize.gmdb.gmdb.Repository.UserRepository;

import jakarta.websocket.server.PathParam;

@RestController
@RequestMapping("/Reviewer")
public class ReviewerController {
    
    
    @Autowired 
    private UserRepository reviewerRepository;

    @Autowired
    private MovieRepository movieRepository;

    @Autowired 
    private ReviewsRepository reviewsRepository;

    

    // 3. As a user
    //    I can provide a Reviewer ID and get back a record that contains Reivewer ID | Username | Date Joined | Number of Reviews
    //    so that I can see details about a particular reviewer.
    @GetMapping("/{id}")
    public ResponseEntity<GmdbUser> getReviewer(@PathVariable Long id){

        Optional<GmdbUser> reviewer = reviewerRepository.findById(id);
        if(reviewer.isPresent() && reviewer.get().getRole().equals("Reviewer")){
            return ResponseEntity.ok().body(reviewer.get());
        }else{
            return ResponseEntity.badRequest().build();
        }
    }



    // 4. As a user
    //    I can register as a reviewer by providing my Username. 
    //    (Reviewer ID should be autogenerated)
    //    So that I can start reviewing movies.
    //
    @PostMapping("/Register")
    public ResponseEntity<GmdbUser> registerReviewer(@RequestBody GmdbUser reviewer){
        reviewer.setRole("Reviewer");
        reviewer.setReviews(new ArrayList<>());
        reviewer.setJoinDate(new Date());
        return ResponseEntity.ok().body(this.reviewerRepository.save(reviewer));
    }
    

    
    //
    // 5. As a reviewer
    //    I can post a review by providing 
    //    my reviewer ID, a movie ID and my review text. (Review ID should be autogenerated)
    //    So that I can share my opinions with others.
    //

    @PostMapping("/{reviewerId}/Movie/{movieId}/Review")
    public ResponseEntity<Reviews> postReview(@PathVariable Long reviewerId, @PathVariable Long movieId, @RequestBody Reviews reviews){
        reviews.setMovies(movieRepository.findById(movieId).get());
        reviews.setReviewer(reviewerRepository.findById(reviewerId).get());
        reviews.setModified(new Date().toString());
        return ResponseEntity.ok().body(reviewsRepository.save(reviews));
    }

    // 6. As a reviewer
    //    I can delete a review by providing my reviewer ID and a review ID
    
    @DeleteMapping("/{reviewerId}/review/{reviewId}")
    public ResponseEntity<Void> deleteReview(@PathVariable Long reviewerId, @PathVariable Long reviewId ){
        try {
            this.reviewsRepository.deleteById(reviewId);
            return ResponseEntity.accepted().build();
            
        } catch (Exception e) {
            // TODO: handle exception
            return ResponseEntity.badRequest().build();
        }

    }

    // 7. As a reviewer
    //    I can update a review by providing my reviewer ID,
    //     a movie ID and my review text.
    //    So that I can modify the opinion I'm sharing with others.
    @PutMapping("/{reviewerId}")
    public ResponseEntity<Reviews> updateReview(@PathVariable Long reviewerId,
                             @PathParam("movieId") Long movieId, 
                             @RequestBody Reviews reviews
                             ){       
                                Long ReviewId=0L;
                                List<Reviews> listOfReviews = movieRepository.findById(movieId).get().getReviews();
                                for(Reviews r: listOfReviews){
                                    if( r.getReviewerId()== reviewerId ){
                                        ReviewId = r.getId();
                                       }
                                } 

                                reviews.setId(ReviewId);
                                reviews.setModified(new Date().toString());
                                reviews.setReviewer(this.reviewerRepository.findById(reviewerId).get());
                                reviews.setMovies(this.movieRepository.findById(movieId).get());
                                return ResponseEntity.ok().body(reviewsRepository.save(reviews));
    }


    
    // 8. As an Admin
    //    I can add a new movie to the database by providing the data listed in story 1 (Movie ID should be autogenerated)
    //    so that I can share new movies with the users.


    // 9. As an Admin
    //    I can add update the entry for a movie by providing the data listed in Story 1.
    // 
    
}
